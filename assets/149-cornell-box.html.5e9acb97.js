import{_ as a,r as p,o as t,c as o,a as n,b as e,d as c,h as u}from"./app.d9ef6744.js";const l="/assets/cornell_box_blender.b120bd91.png",i="/assets/cornell_box_taichi.502f5738.png",k={},r=u('<h1 id="_149-行代码的康奈尔盒子" tabindex="-1"><a class="header-anchor" href="#_149-行代码的康奈尔盒子" aria-hidden="true">#</a> 149 行代码的康奈尔盒子</h1><table><thead><tr><th style="text-align:center;"><img src="'+l+'" alt="Cornell Box Blender"></th><th style="text-align:center;"><img src="'+i+`" alt="Cornell Box Taichi"></th></tr></thead><tbody><tr><td style="text-align:center;">Cornell Box Blender</td><td style="text-align:center;">Cornell Box Taichi</td></tr></tbody></table><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> taichi <span class="token keyword">as</span> ti                                                                <span class="token comment"># of course, we need taichi</span>
<span class="token keyword">from</span> taichi<span class="token punctuation">.</span>math <span class="token keyword">import</span> <span class="token operator">*</span>                                                <span class="token comment"># need common mathematical operations</span>

ti<span class="token punctuation">.</span>init<span class="token punctuation">(</span>arch<span class="token operator">=</span>ti<span class="token punctuation">.</span>gpu<span class="token punctuation">,</span> default_ip<span class="token operator">=</span>ti<span class="token punctuation">.</span>i32<span class="token punctuation">,</span> default_fp<span class="token operator">=</span>ti<span class="token punctuation">.</span>f32<span class="token punctuation">)</span>        <span class="token comment"># initialize, use GPU, set default ip and fp</span>

image_resolution <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">)</span>                                         <span class="token comment"># resolution of the image, not too large</span>
image_buffer <span class="token operator">=</span> ti<span class="token punctuation">.</span>Vector<span class="token punctuation">.</span>field<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">,</span> image_resolution<span class="token punctuation">)</span>    <span class="token comment"># image buffer field for recording sample counts</span>
image_pixels <span class="token operator">=</span> ti<span class="token punctuation">.</span>Vector<span class="token punctuation">.</span>field<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token builtin">float</span><span class="token punctuation">,</span> image_resolution<span class="token punctuation">)</span>           <span class="token comment"># for output display pixels to the screen</span>

Ray <span class="token operator">=</span> ti<span class="token punctuation">.</span>types<span class="token punctuation">.</span>struct<span class="token punctuation">(</span>origin<span class="token operator">=</span>vec3<span class="token punctuation">,</span> direction<span class="token operator">=</span>vec3<span class="token punctuation">,</span> color<span class="token operator">=</span>vec3<span class="token punctuation">)</span>      <span class="token comment"># the struct representing camera light ray</span>
Material <span class="token operator">=</span> ti<span class="token punctuation">.</span>types<span class="token punctuation">.</span>struct<span class="token punctuation">(</span>albedo<span class="token operator">=</span>vec3<span class="token punctuation">,</span> emission<span class="token operator">=</span>vec3<span class="token punctuation">)</span>             <span class="token comment"># Cornell Box need only albedo and emission</span>
Transform <span class="token operator">=</span> ti<span class="token punctuation">.</span>types<span class="token punctuation">.</span>struct<span class="token punctuation">(</span>position<span class="token operator">=</span>vec3<span class="token punctuation">,</span> rotation<span class="token operator">=</span>vec3<span class="token punctuation">,</span> scale<span class="token operator">=</span>vec3<span class="token punctuation">)</span>          <span class="token comment"># Transformation of SDF objects</span>
SDFObject <span class="token operator">=</span> ti<span class="token punctuation">.</span>types<span class="token punctuation">.</span>struct<span class="token punctuation">(</span>distance<span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">,</span> transform<span class="token operator">=</span>Transform<span class="token punctuation">,</span> material<span class="token operator">=</span>Material<span class="token punctuation">)</span>              <span class="token comment"># SDF objects</span>
HitRecord <span class="token operator">=</span> ti<span class="token punctuation">.</span>types<span class="token punctuation">.</span>struct<span class="token punctuation">(</span><span class="token builtin">object</span><span class="token operator">=</span>SDFObject<span class="token punctuation">,</span> position<span class="token operator">=</span>vec3<span class="token punctuation">,</span> distance<span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">,</span> hit<span class="token operator">=</span><span class="token builtin">bool</span><span class="token punctuation">)</span>   <span class="token comment"># for ray-hit-surface</span>

objects    <span class="token operator">=</span> SDFObject<span class="token punctuation">.</span>field<span class="token punctuation">(</span>shape<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>                           <span class="token comment"># field for storing SDF objects with 8 objects</span>
objects<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> SDFObject<span class="token punctuation">(</span>transform<span class="token operator">=</span>Transform<span class="token punctuation">(</span>vec3<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec3<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                material<span class="token operator">=</span>Material<span class="token punctuation">(</span>vec3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.4</span><span class="token punctuation">,</span> vec3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                        <span class="token comment"># wall 1</span>
objects<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> SDFObject<span class="token punctuation">(</span>transform<span class="token operator">=</span>Transform<span class="token punctuation">(</span>vec3<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec3<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                material<span class="token operator">=</span>Material<span class="token punctuation">(</span>vec3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.4</span><span class="token punctuation">,</span> vec3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                        <span class="token comment"># wall 2</span>
objects<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> SDFObject<span class="token punctuation">(</span>transform<span class="token operator">=</span>Transform<span class="token punctuation">(</span>vec3<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec3<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                material<span class="token operator">=</span>Material<span class="token punctuation">(</span>vec3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.4</span><span class="token punctuation">,</span> vec3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                        <span class="token comment"># wall 3</span>
objects<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> SDFObject<span class="token punctuation">(</span>transform<span class="token operator">=</span>Transform<span class="token punctuation">(</span>vec3<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec3<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                material<span class="token operator">=</span>Material<span class="token punctuation">(</span>vec3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.5</span><span class="token punctuation">,</span> vec3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                        <span class="token comment"># wall 4</span>
objects<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> SDFObject<span class="token punctuation">(</span>transform<span class="token operator">=</span>Transform<span class="token punctuation">(</span>vec3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec3<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                material<span class="token operator">=</span>Material<span class="token punctuation">(</span>vec3<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.5</span><span class="token punctuation">,</span> vec3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                        <span class="token comment"># wall 5</span>
objects<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> SDFObject<span class="token punctuation">(</span>transform<span class="token operator">=</span>Transform<span class="token punctuation">(</span>vec3<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.275</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec3<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec3<span class="token punctuation">(</span><span class="token number">0.25</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                material<span class="token operator">=</span>Material<span class="token punctuation">(</span>vec3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.4</span><span class="token punctuation">,</span> vec3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                    <span class="token comment"># taller box</span>
objects<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> SDFObject<span class="token punctuation">(</span>transform<span class="token operator">=</span>Transform<span class="token punctuation">(</span>vec3<span class="token punctuation">(</span><span class="token number">0.275</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0.55</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec3<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">197</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec3<span class="token punctuation">(</span><span class="token number">0.25</span><span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                material<span class="token operator">=</span>Material<span class="token punctuation">(</span>vec3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">0.4</span><span class="token punctuation">,</span> vec3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                           <span class="token comment"># box</span>
objects<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> SDFObject<span class="token punctuation">(</span>transform<span class="token operator">=</span>Transform<span class="token punctuation">(</span>vec3<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.809</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec3<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec3<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                material<span class="token operator">=</span>Material<span class="token punctuation">(</span>vec3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1</span><span class="token punctuation">,</span> vec3<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                         <span class="token comment"># light</span>

<span class="token decorator annotation punctuation">@ti<span class="token punctuation">.</span>func</span>
<span class="token keyword">def</span> <span class="token function">angle</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> vec3<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> mat3<span class="token punctuation">:</span>                                          <span class="token comment"># convert Euler angles to rotation matrix</span>
    s<span class="token punctuation">,</span> c <span class="token operator">=</span> sin<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> cos<span class="token punctuation">(</span>a<span class="token punctuation">)</span>                                          <span class="token comment"># first calculate the two axial projections</span>
    <span class="token keyword">return</span> mat3<span class="token punctuation">(</span>c<span class="token punctuation">.</span>z<span class="token punctuation">,</span> s<span class="token punctuation">.</span>z<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span>s<span class="token punctuation">.</span>z<span class="token punctuation">,</span> c<span class="token punctuation">.</span>z<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> @ \\
           mat3<span class="token punctuation">(</span>c<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span>s<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>y<span class="token punctuation">)</span> @ \\
           mat3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> c<span class="token punctuation">.</span>x<span class="token punctuation">,</span> s<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span>s<span class="token punctuation">.</span>x<span class="token punctuation">,</span> c<span class="token punctuation">.</span>x<span class="token punctuation">)</span>      <span class="token comment"># convert to rotation matrix in XYZ and multiply left</span>

<span class="token decorator annotation punctuation">@ti<span class="token punctuation">.</span>func</span>
<span class="token keyword">def</span> <span class="token function">signed_distance</span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> SDFObject<span class="token punctuation">,</span> pos<span class="token punctuation">:</span> vec3<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">float</span><span class="token punctuation">:</span>     <span class="token comment"># calc the signed distance from pos to SDF object</span>
    p <span class="token operator">=</span> angle<span class="token punctuation">(</span>radians<span class="token punctuation">(</span>obj<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>rotation<span class="token punctuation">)</span><span class="token punctuation">)</span> @ <span class="token punctuation">(</span>pos <span class="token operator">-</span> obj<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>position<span class="token punctuation">)</span>    <span class="token comment"># translate and then rotate</span>
    q <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">-</span> obj<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>scale
    <span class="token keyword">return</span> length<span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">min</span><span class="token punctuation">(</span><span class="token builtin">max</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>x<span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span>y<span class="token punctuation">,</span> q<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>               <span class="token comment"># return the sdf value of the box</span>

<span class="token decorator annotation punctuation">@ti<span class="token punctuation">.</span>func</span>
<span class="token keyword">def</span> <span class="token function">nearest_object</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> vec3<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> SDFObject<span class="token punctuation">:</span>                                        <span class="token comment"># find the nearest sdf object</span>
    o <span class="token operator">=</span> objects<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> o<span class="token punctuation">.</span>distance <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>signed_distance<span class="token punctuation">(</span>o<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span>                   <span class="token comment"># we start with the first object</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                                                  <span class="token comment"># for all 8 objects</span>
        oi <span class="token operator">=</span> objects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> oi<span class="token punctuation">.</span>distance <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>signed_distance<span class="token punctuation">(</span>oi<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># handling the interior of SDF with abs</span>
        <span class="token keyword">if</span> oi<span class="token punctuation">.</span>distance <span class="token operator">&lt;</span> o<span class="token punctuation">.</span>distance<span class="token punctuation">:</span> o <span class="token operator">=</span> oi                  <span class="token comment"># we need the nearest object to step into the ray</span>
    <span class="token keyword">return</span> o                                             <span class="token comment"># this can also be seen as a concatenation of the SDF</span>

<span class="token decorator annotation punctuation">@ti<span class="token punctuation">.</span>func</span>
<span class="token keyword">def</span> <span class="token function">calc_normal</span><span class="token punctuation">(</span>obj<span class="token punctuation">:</span> SDFObject<span class="token punctuation">,</span> p<span class="token punctuation">:</span> vec3<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> vec3<span class="token punctuation">:</span> <span class="token comment"># representing the surface normal by the gradient of the SDF</span>
    e <span class="token operator">=</span> vec2<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.5773</span> <span class="token operator">*</span> <span class="token number">0.005</span>                <span class="token comment"># calculation of gradients using the Tetrahedron technique</span>
    <span class="token keyword">return</span> normalize<span class="token punctuation">(</span>e<span class="token punctuation">.</span>xyy <span class="token operator">*</span> signed_distance<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> p <span class="token operator">+</span> e<span class="token punctuation">.</span>xyy<span class="token punctuation">)</span> <span class="token operator">+</span> \\
                     e<span class="token punctuation">.</span>yyx <span class="token operator">*</span> signed_distance<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> p <span class="token operator">+</span> e<span class="token punctuation">.</span>yyx<span class="token punctuation">)</span> <span class="token operator">+</span> \\
                     e<span class="token punctuation">.</span>yxy <span class="token operator">*</span> signed_distance<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> p <span class="token operator">+</span> e<span class="token punctuation">.</span>yxy<span class="token punctuation">)</span> <span class="token operator">+</span> \\
                     e<span class="token punctuation">.</span>xxx <span class="token operator">*</span> signed_distance<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> p <span class="token operator">+</span> e<span class="token punctuation">.</span>xxx<span class="token punctuation">)</span> <span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@ti<span class="token punctuation">.</span>func</span>
<span class="token keyword">def</span> <span class="token function">raycast</span><span class="token punctuation">(</span>ray<span class="token punctuation">:</span> Ray<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> HitRecord<span class="token punctuation">:</span>                 <span class="token comment"># ray marching to obtain the intersection with the surface</span>
    record <span class="token operator">=</span> HitRecord<span class="token punctuation">(</span>distance<span class="token operator">=</span><span class="token number">0.0005</span><span class="token punctuation">)</span>                                  <span class="token comment"># step a little off the surface first</span>
    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                                      <span class="token comment"># need a maximum number of steps</span>
        record<span class="token punctuation">.</span>position  <span class="token operator">=</span> ray<span class="token punctuation">.</span>origin <span class="token operator">+</span> record<span class="token punctuation">.</span>distance <span class="token operator">*</span> ray<span class="token punctuation">.</span>direction
        record<span class="token punctuation">.</span><span class="token builtin">object</span>    <span class="token operator">=</span> nearest_object<span class="token punctuation">(</span>record<span class="token punctuation">.</span>position<span class="token punctuation">)</span>    <span class="token comment"># according to the nearest distance ray marching</span>
        record<span class="token punctuation">.</span>distance <span class="token operator">+=</span> record<span class="token punctuation">.</span><span class="token builtin">object</span><span class="token punctuation">.</span>distance                                             <span class="token comment"># sphere tracing</span>
        record<span class="token punctuation">.</span>hit       <span class="token operator">=</span> record<span class="token punctuation">.</span><span class="token builtin">object</span><span class="token punctuation">.</span>distance <span class="token operator">&lt;</span> <span class="token number">0.00001</span>         <span class="token comment"># less than the surface thickness is a hit</span>
        <span class="token keyword">if</span> record<span class="token punctuation">.</span>distance <span class="token operator">&gt;</span> <span class="token number">2000.0</span> <span class="token keyword">or</span> record<span class="token punctuation">.</span>hit<span class="token punctuation">:</span> <span class="token keyword">break</span>                        <span class="token comment"># no need to continue stepping</span>
    <span class="token keyword">return</span> record

<span class="token decorator annotation punctuation">@ti<span class="token punctuation">.</span>func</span>
<span class="token keyword">def</span> <span class="token function">hemispheric_sampling</span><span class="token punctuation">(</span>normal<span class="token punctuation">:</span> vec3<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> vec3<span class="token punctuation">:</span>           <span class="token comment"># choose a random direction in the normal hemisphere</span>
    z <span class="token operator">=</span> <span class="token number">2.0</span> <span class="token operator">*</span> ti<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1.0</span>
    a <span class="token operator">=</span> ti<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2.0</span> <span class="token operator">*</span> pi
    xy <span class="token operator">=</span> sqrt<span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">-</span> z<span class="token operator">*</span>z<span class="token punctuation">)</span> <span class="token operator">*</span> vec2<span class="token punctuation">(</span>sin<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> cos<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> normalize<span class="token punctuation">(</span>normal <span class="token operator">+</span> vec3<span class="token punctuation">(</span>xy<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@ti<span class="token punctuation">.</span>func</span>
<span class="token keyword">def</span> <span class="token function">raytrace</span><span class="token punctuation">(</span>ray<span class="token punctuation">:</span> Ray<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> Ray<span class="token punctuation">:</span>                                                                  <span class="token comment"># Path Tracing</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                   <span class="token comment"># 3 times is already enough to bring Global Illumination to the scene</span>
        inv_pdf <span class="token operator">=</span> exp<span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">128.0</span><span class="token punctuation">)</span>
        roulette_prob <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">/</span> inv_pdf<span class="token punctuation">)</span>  <span class="token comment"># Russian Roulette for spreading the computation between frames</span>
        <span class="token keyword">if</span> ti<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> roulette_prob<span class="token punctuation">:</span> ray<span class="token punctuation">.</span>color <span class="token operator">*=</span> roulette_prob<span class="token punctuation">;</span> <span class="token keyword">break</span>                     <span class="token comment"># end of tracing</span>

        record <span class="token operator">=</span> raycast<span class="token punctuation">(</span>ray<span class="token punctuation">)</span>                           <span class="token comment"># calculate the intersection of the ray with the scene</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> record<span class="token punctuation">.</span>hit<span class="token punctuation">:</span> ray<span class="token punctuation">.</span>color <span class="token operator">=</span> vec3<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span>                           <span class="token comment"># not hitting the light source</span>

        normal  <span class="token operator">=</span> calc_normal<span class="token punctuation">(</span>record<span class="token punctuation">.</span><span class="token builtin">object</span><span class="token punctuation">,</span> record<span class="token punctuation">.</span>position<span class="token punctuation">)</span>     <span class="token comment"># calc the normal of the intersection points</span>
        ray<span class="token punctuation">.</span>direction <span class="token operator">=</span> hemispheric_sampling<span class="token punctuation">(</span>normal<span class="token punctuation">)</span>                <span class="token comment"># approximate diffuse reflection direction</span>
        ray<span class="token punctuation">.</span>color <span class="token operator">*=</span> record<span class="token punctuation">.</span><span class="token builtin">object</span><span class="token punctuation">.</span>material<span class="token punctuation">.</span>albedo                  <span class="token comment"># ray needs to be multiplied by the albedo</span>
        ray<span class="token punctuation">.</span>origin <span class="token operator">=</span> record<span class="token punctuation">.</span>position                                         <span class="token comment"># update light departure position</span>

        intensity  <span class="token operator">=</span> dot<span class="token punctuation">(</span>ray<span class="token punctuation">.</span>color<span class="token punctuation">,</span> vec3<span class="token punctuation">(</span><span class="token number">0.299</span><span class="token punctuation">,</span> <span class="token number">0.587</span><span class="token punctuation">,</span> <span class="token number">0.114</span><span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token comment"># calculating the intensity of ray</span>
        ray<span class="token punctuation">.</span>color <span class="token operator">*=</span> record<span class="token punctuation">.</span><span class="token builtin">object</span><span class="token punctuation">.</span>material<span class="token punctuation">.</span>emission                                <span class="token comment"># multiplying the emission</span>
        visible    <span class="token operator">=</span> dot<span class="token punctuation">(</span>ray<span class="token punctuation">.</span>color<span class="token punctuation">,</span> vec3<span class="token punctuation">(</span><span class="token number">0.299</span><span class="token punctuation">,</span> <span class="token number">0.587</span><span class="token punctuation">,</span> <span class="token number">0.114</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                <span class="token comment"># new brightness</span>
        <span class="token keyword">if</span> intensity <span class="token operator">&lt;</span> visible <span class="token keyword">or</span> visible <span class="token operator">&lt;</span> <span class="token number">0.000001</span><span class="token punctuation">:</span> <span class="token keyword">break</span>           <span class="token comment"># too dark or arrive at the light source</span>
    <span class="token keyword">return</span> ray

<span class="token decorator annotation punctuation">@ti<span class="token punctuation">.</span>kernel</span>
<span class="token keyword">def</span> <span class="token function">render</span><span class="token punctuation">(</span>camera_position<span class="token punctuation">:</span> vec3<span class="token punctuation">,</span> camera_lookat<span class="token punctuation">:</span> vec3<span class="token punctuation">,</span> camera_up<span class="token punctuation">:</span> vec3<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i<span class="token punctuation">,</span> j <span class="token keyword">in</span> image_pixels<span class="token punctuation">:</span>                                         <span class="token comment"># iterate through all pixels in parallel</span>
        <span class="token builtin">buffer</span> <span class="token operator">=</span> image_buffer<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span>                                                     <span class="token comment"># current buffer color</span>

        z <span class="token operator">=</span> normalize<span class="token punctuation">(</span>camera_position <span class="token operator">-</span> camera_lookat<span class="token punctuation">)</span>
        x <span class="token operator">=</span> normalize<span class="token punctuation">(</span>cross<span class="token punctuation">(</span>camera_up<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">)</span>                          <span class="token comment"># calculating the camera coordinate system</span>
        y <span class="token operator">=</span> cross<span class="token punctuation">(</span>z<span class="token punctuation">,</span> x<span class="token punctuation">)</span>
        
        half_width <span class="token operator">=</span> half_height <span class="token operator">=</span> tan<span class="token punctuation">(</span>radians<span class="token punctuation">(</span><span class="token number">35</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0.5</span><span class="token punctuation">)</span>           <span class="token comment"># calculate camera frame position and size</span>
        lower_left_corner <span class="token operator">=</span> camera_position <span class="token operator">-</span> half_width <span class="token operator">*</span> x <span class="token operator">-</span> half_height <span class="token operator">*</span> y <span class="token operator">-</span> z
        horizontal <span class="token operator">=</span> <span class="token number">2.0</span> <span class="token operator">*</span> half_width  <span class="token operator">*</span> x
        vertical   <span class="token operator">=</span> <span class="token number">2.0</span> <span class="token operator">*</span> half_height <span class="token operator">*</span> y

        uv <span class="token operator">=</span> <span class="token punctuation">(</span>vec2<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">+</span> vec2<span class="token punctuation">(</span>ti<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ti<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> vec2<span class="token punctuation">(</span>image_resolution<span class="token punctuation">)</span>             <span class="token comment"># oversampling</span>
        po <span class="token operator">=</span> lower_left_corner <span class="token operator">+</span> uv<span class="token punctuation">.</span>x <span class="token operator">*</span> horizontal <span class="token operator">+</span> uv<span class="token punctuation">.</span>y <span class="token operator">*</span> vertical
        rd <span class="token operator">=</span> normalize<span class="token punctuation">(</span>po <span class="token operator">-</span> camera_position<span class="token punctuation">)</span>                          <span class="token comment"># calculation of ray direction by camera</span>

        ray <span class="token operator">=</span> raytrace<span class="token punctuation">(</span>Ray<span class="token punctuation">(</span>camera_position<span class="token punctuation">,</span> rd<span class="token punctuation">,</span> vec3<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                       <span class="token comment"># Path Tracing</span>
        <span class="token builtin">buffer</span> <span class="token operator">+=</span> vec4<span class="token punctuation">(</span>ray<span class="token punctuation">.</span>color<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span>              <span class="token comment"># accumulate colors and record the number of accumulations</span>
        image_buffer<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">buffer</span>                                                      <span class="token comment"># updating the buffer</span>

        color <span class="token operator">=</span> <span class="token builtin">buffer</span><span class="token punctuation">.</span>rgb <span class="token operator">/</span> <span class="token builtin">buffer</span><span class="token punctuation">.</span>a                                  <span class="token comment"># calculate the average value of colors</span>
        color <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span> vec3<span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">/</span> <span class="token number">2.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                     <span class="token comment"># Gamma correction, then use ACES tone mapping</span>
        color <span class="token operator">=</span> mat3<span class="token punctuation">(</span><span class="token number">0.597190</span><span class="token punctuation">,</span> <span class="token number">0.35458</span><span class="token punctuation">,</span> <span class="token number">0.04823</span><span class="token punctuation">,</span> <span class="token number">0.07600</span><span class="token punctuation">,</span> <span class="token number">0.90834</span><span class="token punctuation">,</span> <span class="token number">0.01566</span><span class="token punctuation">,</span> <span class="token number">0.02840</span><span class="token punctuation">,</span> <span class="token number">0.13383</span><span class="token punctuation">,</span> <span class="token number">0.83777</span><span class="token punctuation">)</span> @ color
        color <span class="token operator">=</span> <span class="token punctuation">(</span>color <span class="token operator">*</span> <span class="token punctuation">(</span>color <span class="token operator">+</span> <span class="token number">0.024578</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0.0000905</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>color <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">0.983729</span> <span class="token operator">*</span> color <span class="token operator">+</span> <span class="token number">0.4329510</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.238081</span><span class="token punctuation">)</span>
        color <span class="token operator">=</span> mat3<span class="token punctuation">(</span><span class="token number">1.60475</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.531</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.0736</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.102</span><span class="token punctuation">,</span> <span class="token number">1.10813</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.00605</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.00327</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.07276</span><span class="token punctuation">,</span> <span class="token number">1.07602</span><span class="token punctuation">)</span> @ color
        image_pixels<span class="token punctuation">[</span>i<span class="token punctuation">,</span> j<span class="token punctuation">]</span> <span class="token operator">=</span> clamp<span class="token punctuation">(</span>color<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># write pixels, clamp the brightness that cannot be displayed</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    window <span class="token operator">=</span> ti<span class="token punctuation">.</span>ui<span class="token punctuation">.</span>Window<span class="token punctuation">(</span><span class="token string">&quot;Cornell Box&quot;</span><span class="token punctuation">,</span> image_resolution<span class="token punctuation">)</span>                                     <span class="token comment"># create window</span>
    canvas <span class="token operator">=</span> window<span class="token punctuation">.</span>get_canvas<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">while</span> window<span class="token punctuation">.</span>running<span class="token punctuation">:</span>                                                            <span class="token comment"># main loop of the window</span>
        render<span class="token punctuation">(</span>vec3<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec3<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec3<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># set the camera parameters, then render</span>
        canvas<span class="token punctuation">.</span>set_image<span class="token punctuation">(</span>image_pixels<span class="token punctuation">)</span>                                              <span class="token comment"># writing pixels to canvas</span>
        window<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>                                                                <span class="token comment"># continue to show window</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>                                                                             <span class="token comment"># By HK-SHAO 2023/01/30</span>
<span class="token comment"># ------------------------------------------------------------------------------------------------------------</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container warning"><p class="custom-container-title">sorry...</p><ul><li>抱歉我成了“标题党”，其实 139 行就够了</li></ul></div>`,4),m={class:"custom-container info"},d=n("p",{class:"custom-container-title"},"相关信息",-1),b={href:"https://github.com/HK-SHAO/RayTracingPBR",target:"_blank",rel:"noopener noreferrer"};function v(f,h){const s=p("ExternalLinkIcon");return t(),o("div",null,[r,n("div",m,[d,n("ul",null,[n("li",null,[n("a",b,[e("https://github.com/HK-SHAO/RayTracingPBR"),c(s)])])])])])}const g=a(k,[["render",v],["__file","149-cornell-box.html.vue"]]);export{g as default};
